"use client"

interface GetVulnerabilitiesParams {
  searchTerm?: string
  statusFilter?: string
  severityFilter?: string
  categoryFilter?: string
  sortBy?: string
  sortDirection?: "asc" | "desc"
  page?: number
  limit?: number
}

/**
 * Fetch a paginated / filtered list of vulnerabilities.
 */
export async function getVulnerabilities(params: GetVulnerabilitiesParams = {}) {
  const query = new URLSearchParams(params as any).toString()

  const res = await fetch(`/api/vulnerabilities?${query}`, {
    method: "GET",
    headers: { "Content-Type": "application/json" },
  })

  if (!res.ok) {
    return { success: false, error: "Failed to fetch vulnerabilities", data: [], total: 0 }
  }

  return res.json()
}

/**
 * Create a new vulnerability.
 */
export async function createVulnerability(data: any) {
  const res = await fetch(`/api/vulnerabilities`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  })

  if (!res.ok) {
    return { success: false, error: "Failed to create vulnerability" }
  }

  return res.json()
}

/**
 * Update an existing vulnerability.
 */
export async function updateVulnerability(id: string, data: any) {
  const res = await fetch(`/api/vulnerabilities/${id}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  })

  if (!res.ok) {
    return { success: false, error: "Failed to update vulnerability" }
  }

  return res.json()
}

/**
 * Delete a vulnerability.
 */
export async function deleteVulnerability(id: string) {
  const res = await fetch(`/api/vulnerabilities/${id}`, { method: "DELETE" })

  if (!res.ok) {
    return { success: false, error: "Failed to delete vulnerability" }
  }

  return res.json()
}

/**
 * Fetch a single vulnerability by id.
 */
export async function getVulnerabilityById(id: string) {
  const res = await fetch(`/api/vulnerabilities/${id}`, {
    method: "GET",
    headers: { "Content-Type": "application/json" },
  })

  if (!res.ok) {
    return { success: false, error: "Failed to fetch vulnerability", data: null }
  }

  return res.json()
}

/**
 * Retrieve vulnerability statistics.
 */
export async function getVulnerabilityStats() {
  const res = await fetch(`/api/vulnerabilities/getVulnerabilityStats`, {
    method: "GET",
    headers: { "Content-Type": "application/json" },
  })

  if (!res.ok) {
    return { success: false, error: "Failed to fetch vulnerability stats" }
  }

  return res.json()
}

/**
 * Trigger update of EPSS scores for vulnerabilities with CVE IDs.
 */
export async function updateEPSSScores(forceRefresh = false) {
  const res = await fetch(`/api/vulnerabilities/epss?force=${forceRefresh}`, {
    method: "GET",
  })

  if (!res.ok) {
    const error = await res.json()
    return { success: false, error: error.error || "Failed to update EPSS scores" }
  }

  const result = await res.json()
  return { success: true, data: result }
}

/**
 * Update EPSS score for a specific CVE ID.
 */
export async function updateSingleEPSSScore(cveId: string, forceRefresh = false) {
  const res = await fetch(`/api/vulnerabilities/epss?cve=${cveId}&force=${forceRefresh}`, {
    method: "GET",
  })

  if (!res.ok) {
    const error = await res.json()
    return { success: false, error: error.error || "Failed to update EPSS score" }
  }

  const result = await res.json()
  return { success: true, data: result.data }
}

/**
 * Get vulnerabilities that already have EPSS scores
 * (for risk analysis or dashboards).
 */
export async function getVulnerabilitiesWithEPSS() {
  const res = await fetch(`/api/vulnerabilities/epss`, {
    method: "GET",
    headers: { "Content-Type": "application/json" },
  })

  if (!res.ok) {
    return { success: false, error: "Failed to fetch vulnerabilities with EPSS scores", data: [] }
  }

  return res.json()
}
