"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useToast } from "@/components/ui/use-toast"
import { createVulnerability, updateVulnerability } from "@/lib/actions/vulnerability-actions"
import { Badge } from "@/components/ui/badge"
import { X } from "lucide-react"
import OwnerSelectInput from "@/components/owner-search-input"
import DepartmentSelectInput from "@/components/department-search-input"
import UnitSelectInput from "@/components/unit-search-input"
import AssetSelectInput from "@/components/asset-search-input"

interface VulnerabilityFormProps {
  vulnerability?: any
  onSuccess: () => void
  onCancel: () => void
}

export function VulnerabilityForm({ vulnerability, onSuccess, onCancel }: VulnerabilityFormProps) {
  const [loading, setLoading] = useState(false)
  const [assignedTo, setAssignedTo] = useState(vulnerability?.assigned_to || "")
  const [remediationDepartment, setRemediationDepartment] = useState(vulnerability?.remediation_department || "")
  const [remediationUnit, setRemediationUnit] = useState(vulnerability?.remediation_departmental_unit || "")
  const [assets, setAssets] = useState<string[]>(() => {
    if (vulnerability?.assets) {
      // Handle both string arrays and JSON strings
      if (typeof vulnerability.assets === "string") {
        try {
          return JSON.parse(vulnerability.assets).filter((asset: any) => typeof asset === "string")
        } catch {
          return []
        }
      }
      return Array.isArray(vulnerability.assets) ? vulnerability.assets.filter((asset: any) => typeof asset === "string") : []
    }
    return []
  })
  const [assetSearchTerm, setAssetSearchTerm] = useState("")
  const [tags, setTags] = useState<string[]>(() => {
    if (vulnerability?.tags) {
      // Handle both string arrays and JSON strings
      if (typeof vulnerability.tags === "string") {
        try {
          return JSON.parse(vulnerability.tags).filter((tag: any) => typeof tag === "string")
        } catch {
          return []
        }
      }
      return Array.isArray(vulnerability.tags) ? vulnerability.tags.filter((tag: any) => typeof tag === "string") : []
    }
    return []
  })
  const [newTag, setNewTag] = useState("")
  const [references, setReferences] = useState<string[]>(() => {
    if (vulnerability?.external_references) {
      // Handle both string arrays and JSON strings
      if (typeof vulnerability.external_references === "string") {
        try {
          return JSON.parse(vulnerability.external_references).filter((ref: any) => typeof ref === "string")
        } catch {
          return []
        }
      }
      return Array.isArray(vulnerability.external_references)
        ? vulnerability.external_references.filter((ref: any) => typeof ref === "string")
        : []
    }
    return []
  })
  const [newReference, setNewReference] = useState("")
  const { toast } = useToast()

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    setLoading(true)

    const formData = new FormData(e.currentTarget)

    const vulnerabilityData = {
      name: formData.get("name") as string,
      description: formData.get("description") as string,
      category: formData.get("category") as string,
      severity: formData.get("severity") as string,
      cvss_score: formData.get("cvss_score") ? Number.parseFloat(formData.get("cvss_score") as string) : null,
      cve_id: formData.get("cve_id") as string,
      affected_systems: formData.get("affected_systems") as string,
      assets: assets.filter((asset) => typeof asset === "string" && asset.trim().length > 0),
      remediation_status: formData.get("remediation_status") as string,
      remediation_notes: formData.get("remediation_notes") as string,
      assigned_to: assignedTo,
      remediation_department: remediationDepartment,
      remediation_departmental_unit: remediationUnit,
      priority: formData.get("priority") ? Number.parseInt(formData.get("priority") as string) : 3,
      tat_days: formData.get("tat_days") ? Number.parseInt(formData.get("tat_days") as string) : null,
      // Ensure tags and references are clean string arrays
      tags: tags.filter((tag) => typeof tag === "string" && tag.trim().length > 0),
      external_references: references.filter((ref) => typeof ref === "string" && ref.trim().length > 0),
    }

    try {
      const result = vulnerability
        ? await updateVulnerability(vulnerability.id, vulnerabilityData)
        : await createVulnerability(vulnerabilityData)

      if (result.success) {
        toast({
          title: "Success",
          description: `Vulnerability ${vulnerability ? "updated" : "created"} successfully`,
        })
        onSuccess()
      } else {
        toast({
          title: "Error",
          description: result.error || `Failed to ${vulnerability ? "update" : "create"} vulnerability`,
          variant: "destructive",
        })
      }
    } catch (error) {
      console.error("Error in vulnerability form:", error)
      toast({
        title: "Error",
        description: `Failed to ${vulnerability ? "update" : "create"} vulnerability`,
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  const addTag = () => {
    const trimmedTag = newTag.trim()
    if (trimmedTag && !tags.includes(trimmedTag)) {
      setTags([...tags, trimmedTag])
      setNewTag("")
    }
  }

  const removeTag = (tagToRemove: string) => {
    setTags(tags.filter((tag) => tag !== tagToRemove))
  }

  const addReference = () => {
    const trimmedRef = newReference.trim()
    if (trimmedRef && !references.includes(trimmedRef)) {
      setReferences([...references, trimmedRef])
      setNewReference("")
    }
  }

  const removeReference = (refToRemove: string) => {
    setReferences(references.filter((ref) => ref !== refToRemove))
  }

  const addAsset = (assetText: string) => {
    const trimmedAsset = assetText.trim()
    if (trimmedAsset && !assets.includes(trimmedAsset)) {
      setAssets([...assets, trimmedAsset])
      setAssetSearchTerm("")
    }
  }

  const removeAsset = (assetToRemove: string) => {
    setAssets(assets.filter((asset) => asset !== assetToRemove))
  }

  const getTATBySevertiy = (severity: string) => {
    switch (severity) {
      case "Critical":
        return 7
      case "High":
        return 14
      case "Medium":
        return 30
      case "Low":
        return 60
      case "Informational":
        return 90
      default:
        return 30
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="name">Vulnerability Name *</Label>
          <Input
            id="name"
            name="name"
            defaultValue={vulnerability?.name}
            required
            placeholder="Enter vulnerability name"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="category">Category</Label>
          <Select name="category" defaultValue={vulnerability?.category}>
            <SelectTrigger>
              <SelectValue placeholder="Select category" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Injection">Injection</SelectItem>
              <SelectItem value="Cross-Site Scripting">Cross-Site Scripting</SelectItem>
              <SelectItem value="Access Control">Access Control</SelectItem>
              <SelectItem value="Authentication">Authentication</SelectItem>
              <SelectItem value="Configuration">Configuration</SelectItem>
              <SelectItem value="Cryptography">Cryptography</SelectItem>
              <SelectItem value="Network">Network</SelectItem>
              <SelectItem value="System">System</SelectItem>
              <SelectItem value="Mobile">Mobile</SelectItem>
              <SelectItem value="IoT">IoT</SelectItem>
              <SelectItem value="Cloud">Cloud</SelectItem>
              <SelectItem value="API">API</SelectItem>
              <SelectItem value="Container">Container</SelectItem>
              <SelectItem value="Social Engineering">Social Engineering</SelectItem>
              <SelectItem value="Physical">Physical</SelectItem>
              <SelectItem value="Data Protection">Data Protection</SelectItem>
              <SelectItem value="Supply Chain">Supply Chain</SelectItem>
              <SelectItem value="Other">Other</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-2">
          <Label htmlFor="severity">Severity *</Label>
          <Select name="severity" defaultValue={vulnerability?.severity} required>
            <SelectTrigger>
              <SelectValue placeholder="Select severity" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Critical">Critical</SelectItem>
              <SelectItem value="High">High</SelectItem>
              <SelectItem value="Medium">Medium</SelectItem>
              <SelectItem value="Low">Low</SelectItem>
              <SelectItem value="Informational">Informational</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-2">
          <Label htmlFor="cvss_score">CVSS Score</Label>
          <Input
            id="cvss_score"
            name="cvss_score"
            type="number"
            step="0.1"
            min="0"
            max="10"
            defaultValue={vulnerability?.cvss_score}
            placeholder="0.0 - 10.0"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="cve_id">CVE ID</Label>
          <Input id="cve_id" name="cve_id" defaultValue={vulnerability?.cve_id} placeholder="CVE-YYYY-NNNN" />
        </div>

        <div className="space-y-2">
          <Label htmlFor="priority">Priority</Label>
          <Select name="priority" defaultValue={vulnerability?.priority?.toString() || "3"}>
            <SelectTrigger>
              <SelectValue placeholder="Select priority" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="1">1 - Highest</SelectItem>
              <SelectItem value="2">2 - High</SelectItem>
              <SelectItem value="3">3 - Medium</SelectItem>
              <SelectItem value="4">4 - Low</SelectItem>
              <SelectItem value="5">5 - Lowest</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-2">
          <Label htmlFor="remediation_status">Remediation Status</Label>
          <Select name="remediation_status" defaultValue={vulnerability?.remediation_status || "Open"}>
            <SelectTrigger>
              <SelectValue placeholder="Select status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Open">Open</SelectItem>
              <SelectItem value="In Progress">In Progress</SelectItem>
              <SelectItem value="Resolved">Resolved</SelectItem>
              <SelectItem value="Accepted Risk">Accepted Risk</SelectItem>
              <SelectItem value="False Positive">False Positive</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-2">
          <Label htmlFor="assigned_to">Assigned To</Label>
          <OwnerSelectInput 
            formData={{ assigned_to: assignedTo }} 
            setFormData={(data) => setAssignedTo(data.assigned_to)} 
            fieldName="assigned_to"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="tat_days">TAT (Days)</Label>
          <Input
            id="tat_days"
            name="tat_days"
            type="number"
            min="1"
            defaultValue={vulnerability?.tat_days}
            placeholder="Auto-set based on severity"
          />
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="remediation_department">Remediation Department</Label>
          <DepartmentSelectInput
            formData={{ remediation_department: remediationDepartment }}
            setFormData={(data) => setRemediationDepartment(data.remediation_department)}
            fieldName="remediation_department"
            onDepartmentSelected={(department) => {
              setRemediationDepartment(department.name)
            }}
          />
          <p className="text-xs text-muted-foreground">
            Search and select department responsible for remediation
          </p>
        </div>

        <div className="space-y-2">
          <Label htmlFor="remediation_departmental_unit">Remediation Departmental Unit</Label>
          <UnitSelectInput
            formData={{ remediation_departmental_unit: remediationUnit }}
            setFormData={(data) => setRemediationUnit(data.remediation_departmental_unit)}
            fieldName="remediation_departmental_unit"
            onUnitSelected={(unit) => {
              setRemediationUnit(unit.department_unit || unit.name)
            }}
          />
          <p className="text-xs text-muted-foreground">
            Search and select specific unit within department
          </p>
        </div>
      </div>

      <div className="space-y-2">
        <Label htmlFor="description">Description</Label>
        <Textarea
          id="description"
          name="description"
          defaultValue={vulnerability?.description}
          placeholder="Detailed description of the vulnerability"
          rows={3}
        />
      </div>

      {/* Assets Section */}
      <div className="space-y-2">
        <Label>Associated Assets</Label>
        <div className="flex flex-wrap gap-2 mb-2">
          {assets.map((asset) => (
            <Badge key={asset} variant="secondary" className="flex items-center gap-1">
              {asset}
              <X className="h-3 w-3 cursor-pointer" onClick={() => removeAsset(asset)} />
            </Badge>
          ))}
        </div>
        <div className="space-y-2">
          <AssetSelectInput 
            formData={{ asset: assetSearchTerm }} 
            setFormData={(data) => setAssetSearchTerm(data.asset)} 
            fieldName="asset"
            onAssetSelected={(selectedAsset) => {
              const assetText = `${selectedAsset.asset_name} (${selectedAsset.asset_id})`;
              addAsset(assetText);
            }}
          />
          <p className="text-xs text-muted-foreground">
            Search and add multiple assets affected by this vulnerability
          </p>
        </div>
      </div>

      <div className="space-y-2">
        <Label htmlFor="affected_systems">Affected Systems (Additional Details)</Label>
        <Textarea
          id="affected_systems"
          name="affected_systems"
          defaultValue={vulnerability?.affected_systems}
          placeholder="Additional details about affected systems, applications, or components"
          rows={2}
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="remediation_notes">Remediation Notes</Label>
        <Textarea
          id="remediation_notes"
          name="remediation_notes"
          defaultValue={vulnerability?.remediation_notes}
          placeholder="Remediation steps, progress notes, or recommendations"
          rows={3}
        />
      </div>

      {/* Tags Section */}
      <div className="space-y-2">
        <Label>Tags</Label>
        <div className="flex flex-wrap gap-2 mb-2">
          {tags.map((tag) => (
            <Badge key={tag} variant="secondary" className="flex items-center gap-1">
              {tag}
              <X className="h-3 w-3 cursor-pointer" onClick={() => removeTag(tag)} />
            </Badge>
          ))}
        </div>
        <div className="flex gap-2">
          <Input
            value={newTag}
            onChange={(e) => setNewTag(e.target.value)}
            placeholder="Add tag"
            onKeyPress={(e) => e.key === "Enter" && (e.preventDefault(), addTag())}
          />
          <Button type="button" variant="outline" onClick={addTag}>
            Add
          </Button>
        </div>
      </div>

      {/* External References Section */}
      <div className="space-y-2">
        <Label>External References</Label>
        <div className="space-y-1 mb-2">
          {references.map((ref) => (
            <div key={ref} className="flex items-center justify-between bg-muted p-2 rounded">
              <span className="text-sm">{ref}</span>
              <X className="h-4 w-4 cursor-pointer" onClick={() => removeReference(ref)} />
            </div>
          ))}
        </div>
        <div className="flex gap-2">
          <Input
            value={newReference}
            onChange={(e) => setNewReference(e.target.value)}
            placeholder="Add reference (CWE-XX, OWASP-XX, etc.)"
            onKeyPress={(e) => e.key === "Enter" && (e.preventDefault(), addReference())}
          />
          <Button type="button" variant="outline" onClick={addReference}>
            Add
          </Button>
        </div>
      </div>

      <div className="flex justify-end space-x-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit" disabled={loading} className="gradient-bg text-white">
          {loading ? "Saving..." : vulnerability ? "Update Vulnerability" : "Create Vulnerability"}
        </Button>
      </div>
    </form>
  )
}
